@page "/forum"
@using Forum.API.DTO.Posts
@using Forum.Frontend.Components.Controls
@using Forum.Frontend.Services
@using Forum.Logic.Models
@using Newtonsoft.Json
@inject ICookie Cookie
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@rendermode RenderMode.InteractiveServer

<div class="d-flex flex-column justify-content-center">
    <h3>Chesno4ok's Forum</h3>
    <div>
        <MudButton Variant="Variant.Filled" OnClick="@CreatePost">Create new post</MudButton>
    </div>
</div>

<MudGrid Justify="Justify.Center">
    @foreach (var post in @posts)
    {
        <MudItem xs="7">
            <MudPaper>
                <PostCard post="@post" />
            </MudPaper>
        </MudItem>
    }
</MudGrid>


@code {
    private string token = "";
    private HttpClient client;
    private List<PostResponseDto>? posts { get; set; } = new List<PostResponseDto>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        client = ClientFactory.CreateClient("backend");
        token = await Cookie.GetValue("Authorization");
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

        await base.OnParametersSetAsync();

        posts.Clear();
        GetAllPosts();
        posts.OrderBy(i => i.PublicationDate);
        StateHasChanged();
    }

    private void GetAllPosts()
    {
        var response =  client.GetAsync("api/post/get_all").Result;

        var json =  response.Content.ReadAsStringAsync().Result;
        var posts = JsonConvert.DeserializeObject<PostResponseDto[]>(json);

        this.posts = new List<PostResponseDto>(posts);
    }

    private async Task CreatePost()
    {

        
        NavigationManager.NavigateTo("/newpost");
    }

    
}
