@using Forum.API.DTO.Users
@using Forum.Frontend.Components.Pages
@using Forum.Frontend.Services
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject ICookie Cookie

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]" />
    @* <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["Forum.Frontend.styles.css"]" /> *@


    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <ImportMap />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />
    @* Required *@

</head>

<body>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="routeData" />
        </Found>
    </Router>
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>

    <MudThemeProvider />
    <MudPopoverProvider />
    @* Needed for dialogs *@
    <MudDialogProvider />
    @* Needed for snackbars *@
    <MudSnackbarProvider />

</body>

</html>


@code{
    bool isLogin = false;

    public async Task OnLogin(UserTokenDto token){
        NavigationManager.NavigateTo("/forum");
    }


    private static string[] anonEndpoints = new string[] { "/login", "/register", "", "/" };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var client = ClientFactory.CreateClient("backend");
        await client.SetCookie(Cookie);

        var response = await client.GetAsync("/isLogin");

        if (response.IsSuccessStatusCode)
        {
            return;
        }

        var pathString = NavigationManager.Uri;


        if (anonEndpoints.Any(i => i == pathString))
            return;
        else
            NavigationManager.NavigateTo("/401");

        await base.OnAfterRenderAsync(firstRender);
    }


}